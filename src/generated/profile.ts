// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.6.1
// source: profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "profile";

export interface Empty {
}

export interface HealthReport {
  /** "rabbitmq": "ok", "auth": "fail" */
  components: { [key: string]: string };
  healthy: boolean;
}

export interface HealthReport_ComponentsEntry {
  key: string;
  value: string;
}

export interface StatusInfo {
  name: string;
  version: string;
  uptime: number;
  env: string;
  timestamp: string;
}

export interface LiveStatus {
  live: boolean;
}

export interface ReadyStatus {
  ready: boolean;
}

export interface UpsertRequest {
  userId: string;
}

export interface ViewRequest {
  userId: string;
}

export interface ProfileResponse {
  profileId: string;
  userId: string;
  nickname: string;
  level: number;
  rating: number;
  experience: number;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Empty>): Empty {
    return Empty.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Empty>): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseHealthReport(): HealthReport {
  return { components: {}, healthy: false };
}

export const HealthReport: MessageFns<HealthReport> = {
  encode(message: HealthReport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.components).forEach(([key, value]) => {
      HealthReport_ComponentsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.healthy !== false) {
      writer.uint32(16).bool(message.healthy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = HealthReport_ComponentsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.components[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthReport {
    return {
      components: isObject(object.components)
        ? Object.entries(object.components).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      healthy: isSet(object.healthy) ? globalThis.Boolean(object.healthy) : false,
    };
  },

  toJSON(message: HealthReport): unknown {
    const obj: any = {};
    if (message.components) {
      const entries = Object.entries(message.components);
      if (entries.length > 0) {
        obj.components = {};
        entries.forEach(([k, v]) => {
          obj.components[k] = v;
        });
      }
    }
    if (message.healthy !== false) {
      obj.healthy = message.healthy;
    }
    return obj;
  },

  create(base?: DeepPartial<HealthReport>): HealthReport {
    return HealthReport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HealthReport>): HealthReport {
    const message = createBaseHealthReport();
    message.components = Object.entries(object.components ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.healthy = object.healthy ?? false;
    return message;
  },
};

function createBaseHealthReport_ComponentsEntry(): HealthReport_ComponentsEntry {
  return { key: "", value: "" };
}

export const HealthReport_ComponentsEntry: MessageFns<HealthReport_ComponentsEntry> = {
  encode(message: HealthReport_ComponentsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthReport_ComponentsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthReport_ComponentsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthReport_ComponentsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: HealthReport_ComponentsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<HealthReport_ComponentsEntry>): HealthReport_ComponentsEntry {
    return HealthReport_ComponentsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HealthReport_ComponentsEntry>): HealthReport_ComponentsEntry {
    const message = createBaseHealthReport_ComponentsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseStatusInfo(): StatusInfo {
  return { name: "", version: "", uptime: 0, env: "", timestamp: "" };
}

export const StatusInfo: MessageFns<StatusInfo> = {
  encode(message: StatusInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.uptime !== 0) {
      writer.uint32(33).double(message.uptime);
    }
    if (message.env !== "") {
      writer.uint32(42).string(message.env);
    }
    if (message.timestamp !== "") {
      writer.uint32(50).string(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatusInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.uptime = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.env = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      uptime: isSet(object.uptime) ? globalThis.Number(object.uptime) : 0,
      env: isSet(object.env) ? globalThis.String(object.env) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
    };
  },

  toJSON(message: StatusInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.uptime !== 0) {
      obj.uptime = message.uptime;
    }
    if (message.env !== "") {
      obj.env = message.env;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create(base?: DeepPartial<StatusInfo>): StatusInfo {
    return StatusInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StatusInfo>): StatusInfo {
    const message = createBaseStatusInfo();
    message.name = object.name ?? "";
    message.version = object.version ?? "";
    message.uptime = object.uptime ?? 0;
    message.env = object.env ?? "";
    message.timestamp = object.timestamp ?? "";
    return message;
  },
};

function createBaseLiveStatus(): LiveStatus {
  return { live: false };
}

export const LiveStatus: MessageFns<LiveStatus> = {
  encode(message: LiveStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.live !== false) {
      writer.uint32(8).bool(message.live);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.live = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStatus {
    return { live: isSet(object.live) ? globalThis.Boolean(object.live) : false };
  },

  toJSON(message: LiveStatus): unknown {
    const obj: any = {};
    if (message.live !== false) {
      obj.live = message.live;
    }
    return obj;
  },

  create(base?: DeepPartial<LiveStatus>): LiveStatus {
    return LiveStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LiveStatus>): LiveStatus {
    const message = createBaseLiveStatus();
    message.live = object.live ?? false;
    return message;
  },
};

function createBaseReadyStatus(): ReadyStatus {
  return { ready: false };
}

export const ReadyStatus: MessageFns<ReadyStatus> = {
  encode(message: ReadyStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ready !== false) {
      writer.uint32(8).bool(message.ready);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadyStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadyStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ready = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadyStatus {
    return { ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : false };
  },

  toJSON(message: ReadyStatus): unknown {
    const obj: any = {};
    if (message.ready !== false) {
      obj.ready = message.ready;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadyStatus>): ReadyStatus {
    return ReadyStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadyStatus>): ReadyStatus {
    const message = createBaseReadyStatus();
    message.ready = object.ready ?? false;
    return message;
  },
};

function createBaseUpsertRequest(): UpsertRequest {
  return { userId: "" };
}

export const UpsertRequest: MessageFns<UpsertRequest> = {
  encode(message: UpsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpsertRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: UpsertRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpsertRequest>): UpsertRequest {
    return UpsertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpsertRequest>): UpsertRequest {
    const message = createBaseUpsertRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseViewRequest(): ViewRequest {
  return { userId: "" };
}

export const ViewRequest: MessageFns<ViewRequest> = {
  encode(message: ViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ViewRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<ViewRequest>): ViewRequest {
    return ViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ViewRequest>): ViewRequest {
    const message = createBaseViewRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseProfileResponse(): ProfileResponse {
  return { profileId: "", userId: "", nickname: "", level: 0, rating: 0, experience: 0 };
}

export const ProfileResponse: MessageFns<ProfileResponse> = {
  encode(message: ProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profileId !== "") {
      writer.uint32(10).string(message.profileId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.level !== 0) {
      writer.uint32(32).int64(message.level);
    }
    if (message.rating !== 0) {
      writer.uint32(40).int64(message.rating);
    }
    if (message.experience !== 0) {
      writer.uint32(48).int64(message.experience);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.level = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rating = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.experience = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileResponse {
    return {
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      experience: isSet(object.experience) ? globalThis.Number(object.experience) : 0,
    };
  },

  toJSON(message: ProfileResponse): unknown {
    const obj: any = {};
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.rating !== 0) {
      obj.rating = Math.round(message.rating);
    }
    if (message.experience !== 0) {
      obj.experience = Math.round(message.experience);
    }
    return obj;
  },

  create(base?: DeepPartial<ProfileResponse>): ProfileResponse {
    return ProfileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProfileResponse>): ProfileResponse {
    const message = createBaseProfileResponse();
    message.profileId = object.profileId ?? "";
    message.userId = object.userId ?? "";
    message.nickname = object.nickname ?? "";
    message.level = object.level ?? 0;
    message.rating = object.rating ?? 0;
    message.experience = object.experience ?? 0;
    return message;
  },
};

export type ProfileService = typeof ProfileService;
export const ProfileService = {
  upsert: {
    path: "/profile.Profile/Upsert",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpsertRequest): Buffer => Buffer.from(UpsertRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpsertRequest => UpsertRequest.decode(value),
    responseSerialize: (value: ProfileResponse): Buffer => Buffer.from(ProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProfileResponse => ProfileResponse.decode(value),
  },
  view: {
    path: "/profile.Profile/View",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ViewRequest): Buffer => Buffer.from(ViewRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ViewRequest => ViewRequest.decode(value),
    responseSerialize: (value: ProfileResponse): Buffer => Buffer.from(ProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProfileResponse => ProfileResponse.decode(value),
  },
  health: {
    path: "/profile.Profile/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: HealthReport): Buffer => Buffer.from(HealthReport.encode(value).finish()),
    responseDeserialize: (value: Buffer): HealthReport => HealthReport.decode(value),
  },
  status: {
    path: "/profile.Profile/Status",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: StatusInfo): Buffer => Buffer.from(StatusInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer): StatusInfo => StatusInfo.decode(value),
  },
  livez: {
    path: "/profile.Profile/Livez",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: LiveStatus): Buffer => Buffer.from(LiveStatus.encode(value).finish()),
    responseDeserialize: (value: Buffer): LiveStatus => LiveStatus.decode(value),
  },
  readyz: {
    path: "/profile.Profile/Readyz",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: ReadyStatus): Buffer => Buffer.from(ReadyStatus.encode(value).finish()),
    responseDeserialize: (value: Buffer): ReadyStatus => ReadyStatus.decode(value),
  },
} as const;

export interface ProfileServer extends UntypedServiceImplementation {
  upsert: handleUnaryCall<UpsertRequest, ProfileResponse>;
  view: handleUnaryCall<ViewRequest, ProfileResponse>;
  health: handleUnaryCall<Empty, HealthReport>;
  status: handleUnaryCall<Empty, StatusInfo>;
  livez: handleUnaryCall<Empty, LiveStatus>;
  readyz: handleUnaryCall<Empty, ReadyStatus>;
}

export interface ProfileClient extends Client {
  upsert(
    request: UpsertRequest,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  upsert(
    request: UpsertRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  upsert(
    request: UpsertRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  view(
    request: ViewRequest,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  view(
    request: ViewRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  view(
    request: ViewRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  health(request: Empty, callback: (error: ServiceError | null, response: HealthReport) => void): ClientUnaryCall;
  health(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HealthReport) => void,
  ): ClientUnaryCall;
  health(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HealthReport) => void,
  ): ClientUnaryCall;
  status(request: Empty, callback: (error: ServiceError | null, response: StatusInfo) => void): ClientUnaryCall;
  status(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusInfo) => void,
  ): ClientUnaryCall;
  status(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusInfo) => void,
  ): ClientUnaryCall;
  livez(request: Empty, callback: (error: ServiceError | null, response: LiveStatus) => void): ClientUnaryCall;
  livez(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LiveStatus) => void,
  ): ClientUnaryCall;
  livez(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LiveStatus) => void,
  ): ClientUnaryCall;
  readyz(request: Empty, callback: (error: ServiceError | null, response: ReadyStatus) => void): ClientUnaryCall;
  readyz(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ReadyStatus) => void,
  ): ClientUnaryCall;
  readyz(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ReadyStatus) => void,
  ): ClientUnaryCall;
}

export const ProfileClient = makeGenericClientConstructor(ProfileService, "profile.Profile") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProfileClient;
  service: typeof ProfileService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
