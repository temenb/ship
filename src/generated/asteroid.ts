// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.6.1
// source: asteroid.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "asteroid";

export enum AsteroidType {
  UNKNOWN = 0,
  BASE = 1,
  ASTEROID = 2,
  PORTAL = 3,
  UNRECOGNIZED = -1,
}

export function asteroidTypeFromJSON(object: any): AsteroidType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return AsteroidType.UNKNOWN;
    case 1:
    case "BASE":
      return AsteroidType.BASE;
    case 2:
    case "ASTEROID":
      return AsteroidType.ASTEROID;
    case 3:
    case "PORTAL":
      return AsteroidType.PORTAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AsteroidType.UNRECOGNIZED;
  }
}

export function asteroidTypeToJSON(object: AsteroidType): string {
  switch (object) {
    case AsteroidType.UNKNOWN:
      return "UNKNOWN";
    case AsteroidType.BASE:
      return "BASE";
    case AsteroidType.ASTEROID:
      return "ASTEROID";
    case AsteroidType.PORTAL:
      return "PORTAL";
    case AsteroidType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ListAsteroidsRequest {
  userId: string;
  galaxyId: string;
}

export interface ListAsteroidsResponse {
  asteroids: AsteroidObject[];
}

export interface AsteroidObject {
  id: string;
  type: AsteroidType;
  x: number;
  y: number;
  hp: number;
}

export interface GetAsteroidRequest {
  asteroidId: string;
}

export interface GetAsteroidResponse {
  asteroid: AsteroidObject | undefined;
}

export interface ListGalaxiesResponse {
  galaxies: Galaxy[];
}

export interface ListGalaxiesRequest {
  userId: string;
}

export interface Galaxy {
  id: string;
}

function createBaseListAsteroidsRequest(): ListAsteroidsRequest {
  return { userId: "", galaxyId: "" };
}

export const ListAsteroidsRequest: MessageFns<ListAsteroidsRequest> = {
  encode(message: ListAsteroidsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.galaxyId !== "") {
      writer.uint32(18).string(message.galaxyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAsteroidsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAsteroidsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.galaxyId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAsteroidsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      galaxyId: isSet(object.galaxyId) ? globalThis.String(object.galaxyId) : "",
    };
  },

  toJSON(message: ListAsteroidsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.galaxyId !== "") {
      obj.galaxyId = message.galaxyId;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAsteroidsRequest>): ListAsteroidsRequest {
    return ListAsteroidsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAsteroidsRequest>): ListAsteroidsRequest {
    const message = createBaseListAsteroidsRequest();
    message.userId = object.userId ?? "";
    message.galaxyId = object.galaxyId ?? "";
    return message;
  },
};

function createBaseListAsteroidsResponse(): ListAsteroidsResponse {
  return { asteroids: [] };
}

export const ListAsteroidsResponse: MessageFns<ListAsteroidsResponse> = {
  encode(message: ListAsteroidsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.asteroids) {
      AsteroidObject.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAsteroidsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAsteroidsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.asteroids.push(AsteroidObject.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAsteroidsResponse {
    return {
      asteroids: globalThis.Array.isArray(object?.asteroids)
        ? object.asteroids.map((e: any) => AsteroidObject.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAsteroidsResponse): unknown {
    const obj: any = {};
    if (message.asteroids?.length) {
      obj.asteroids = message.asteroids.map((e) => AsteroidObject.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListAsteroidsResponse>): ListAsteroidsResponse {
    return ListAsteroidsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAsteroidsResponse>): ListAsteroidsResponse {
    const message = createBaseListAsteroidsResponse();
    message.asteroids = object.asteroids?.map((e) => AsteroidObject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAsteroidObject(): AsteroidObject {
  return { id: "", type: 0, x: 0, y: 0, hp: 0 };
}

export const AsteroidObject: MessageFns<AsteroidObject> = {
  encode(message: AsteroidObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.x !== 0) {
      writer.uint32(24).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(32).int32(message.y);
    }
    if (message.hp !== 0) {
      writer.uint32(40).int32(message.hp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AsteroidObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsteroidObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hp = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AsteroidObject {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? asteroidTypeFromJSON(object.type) : 0,
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      hp: isSet(object.hp) ? globalThis.Number(object.hp) : 0,
    };
  },

  toJSON(message: AsteroidObject): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = asteroidTypeToJSON(message.type);
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.hp !== 0) {
      obj.hp = Math.round(message.hp);
    }
    return obj;
  },

  create(base?: DeepPartial<AsteroidObject>): AsteroidObject {
    return AsteroidObject.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AsteroidObject>): AsteroidObject {
    const message = createBaseAsteroidObject();
    message.id = object.id ?? "";
    message.type = object.type ?? 0;
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.hp = object.hp ?? 0;
    return message;
  },
};

function createBaseGetAsteroidRequest(): GetAsteroidRequest {
  return { asteroidId: "" };
}

export const GetAsteroidRequest: MessageFns<GetAsteroidRequest> = {
  encode(message: GetAsteroidRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asteroidId !== "") {
      writer.uint32(10).string(message.asteroidId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAsteroidRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAsteroidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.asteroidId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAsteroidRequest {
    return { asteroidId: isSet(object.asteroidId) ? globalThis.String(object.asteroidId) : "" };
  },

  toJSON(message: GetAsteroidRequest): unknown {
    const obj: any = {};
    if (message.asteroidId !== "") {
      obj.asteroidId = message.asteroidId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAsteroidRequest>): GetAsteroidRequest {
    return GetAsteroidRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAsteroidRequest>): GetAsteroidRequest {
    const message = createBaseGetAsteroidRequest();
    message.asteroidId = object.asteroidId ?? "";
    return message;
  },
};

function createBaseGetAsteroidResponse(): GetAsteroidResponse {
  return { asteroid: undefined };
}

export const GetAsteroidResponse: MessageFns<GetAsteroidResponse> = {
  encode(message: GetAsteroidResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asteroid !== undefined) {
      AsteroidObject.encode(message.asteroid, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAsteroidResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAsteroidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.asteroid = AsteroidObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAsteroidResponse {
    return { asteroid: isSet(object.asteroid) ? AsteroidObject.fromJSON(object.asteroid) : undefined };
  },

  toJSON(message: GetAsteroidResponse): unknown {
    const obj: any = {};
    if (message.asteroid !== undefined) {
      obj.asteroid = AsteroidObject.toJSON(message.asteroid);
    }
    return obj;
  },

  create(base?: DeepPartial<GetAsteroidResponse>): GetAsteroidResponse {
    return GetAsteroidResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAsteroidResponse>): GetAsteroidResponse {
    const message = createBaseGetAsteroidResponse();
    message.asteroid = (object.asteroid !== undefined && object.asteroid !== null)
      ? AsteroidObject.fromPartial(object.asteroid)
      : undefined;
    return message;
  },
};

function createBaseListGalaxiesResponse(): ListGalaxiesResponse {
  return { galaxies: [] };
}

export const ListGalaxiesResponse: MessageFns<ListGalaxiesResponse> = {
  encode(message: ListGalaxiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.galaxies) {
      Galaxy.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGalaxiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGalaxiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.galaxies.push(Galaxy.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGalaxiesResponse {
    return {
      galaxies: globalThis.Array.isArray(object?.galaxies) ? object.galaxies.map((e: any) => Galaxy.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListGalaxiesResponse): unknown {
    const obj: any = {};
    if (message.galaxies?.length) {
      obj.galaxies = message.galaxies.map((e) => Galaxy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListGalaxiesResponse>): ListGalaxiesResponse {
    return ListGalaxiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGalaxiesResponse>): ListGalaxiesResponse {
    const message = createBaseListGalaxiesResponse();
    message.galaxies = object.galaxies?.map((e) => Galaxy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGalaxiesRequest(): ListGalaxiesRequest {
  return { userId: "" };
}

export const ListGalaxiesRequest: MessageFns<ListGalaxiesRequest> = {
  encode(message: ListGalaxiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGalaxiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGalaxiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGalaxiesRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ListGalaxiesRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGalaxiesRequest>): ListGalaxiesRequest {
    return ListGalaxiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGalaxiesRequest>): ListGalaxiesRequest {
    const message = createBaseListGalaxiesRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGalaxy(): Galaxy {
  return { id: "" };
}

export const Galaxy: MessageFns<Galaxy> = {
  encode(message: Galaxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Galaxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGalaxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Galaxy {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Galaxy): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<Galaxy>): Galaxy {
    return Galaxy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Galaxy>): Galaxy {
    const message = createBaseGalaxy();
    message.id = object.id ?? "";
    return message;
  },
};

export type AsteroidService = typeof AsteroidService;
export const AsteroidService = {
  listAsteroids: {
    path: "/asteroid.Asteroid/ListAsteroids",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListAsteroidsRequest): Buffer => Buffer.from(ListAsteroidsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListAsteroidsRequest => ListAsteroidsRequest.decode(value),
    responseSerialize: (value: ListAsteroidsResponse): Buffer =>
      Buffer.from(ListAsteroidsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListAsteroidsResponse => ListAsteroidsResponse.decode(value),
  },
  getAsteroid: {
    path: "/asteroid.Asteroid/GetAsteroid",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAsteroidRequest): Buffer => Buffer.from(GetAsteroidRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAsteroidRequest => GetAsteroidRequest.decode(value),
    responseSerialize: (value: GetAsteroidResponse): Buffer => Buffer.from(GetAsteroidResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAsteroidResponse => GetAsteroidResponse.decode(value),
  },
  listGalaxies: {
    path: "/asteroid.Asteroid/ListGalaxies",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListGalaxiesRequest): Buffer => Buffer.from(ListGalaxiesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListGalaxiesRequest => ListGalaxiesRequest.decode(value),
    responseSerialize: (value: ListGalaxiesResponse): Buffer =>
      Buffer.from(ListGalaxiesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListGalaxiesResponse => ListGalaxiesResponse.decode(value),
  },
} as const;

export interface AsteroidServer extends UntypedServiceImplementation {
  listAsteroids: handleUnaryCall<ListAsteroidsRequest, ListAsteroidsResponse>;
  getAsteroid: handleUnaryCall<GetAsteroidRequest, GetAsteroidResponse>;
  listGalaxies: handleUnaryCall<ListGalaxiesRequest, ListGalaxiesResponse>;
}

export interface AsteroidClient extends Client {
  listAsteroids(
    request: ListAsteroidsRequest,
    callback: (error: ServiceError | null, response: ListAsteroidsResponse) => void,
  ): ClientUnaryCall;
  listAsteroids(
    request: ListAsteroidsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListAsteroidsResponse) => void,
  ): ClientUnaryCall;
  listAsteroids(
    request: ListAsteroidsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListAsteroidsResponse) => void,
  ): ClientUnaryCall;
  getAsteroid(
    request: GetAsteroidRequest,
    callback: (error: ServiceError | null, response: GetAsteroidResponse) => void,
  ): ClientUnaryCall;
  getAsteroid(
    request: GetAsteroidRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAsteroidResponse) => void,
  ): ClientUnaryCall;
  getAsteroid(
    request: GetAsteroidRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAsteroidResponse) => void,
  ): ClientUnaryCall;
  listGalaxies(
    request: ListGalaxiesRequest,
    callback: (error: ServiceError | null, response: ListGalaxiesResponse) => void,
  ): ClientUnaryCall;
  listGalaxies(
    request: ListGalaxiesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListGalaxiesResponse) => void,
  ): ClientUnaryCall;
  listGalaxies(
    request: ListGalaxiesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListGalaxiesResponse) => void,
  ): ClientUnaryCall;
}

export const AsteroidClient = makeGenericClientConstructor(AsteroidService, "asteroid.Asteroid") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AsteroidClient;
  service: typeof AsteroidService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
